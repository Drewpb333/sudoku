{"version":3,"sources":["logo.svg","Header/Header.js","Square/Square.js","Row/Row.js","Card/Card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","difficultyLevel","react_default","a","createElement","value","difficulty","onChange","change","selected","className","src","logo","alt","Square","correctInput","display","row","id","split","column","inputCSS","squareBackground","boards","differentialBoard","background","originalUnsolvedBoard","type","e","handleInput","target","style","Row","squareValues","values","map","num","i","src_Square_Square","concat","toString","input","Card","unsolvedRows","unsolvedBoard","rowNum","src_Row_Row","App","state","board","createBoardArr","forEach","x","boardColumns","_this","checkBoardColumns","noDuplicates","boardRow","addNumbertoSquare","q","includes","_this$createUnsolvedB","createUnsolvedBoard","_this$createUnsolvedB2","Object","slicedToArray","setState","numsArr","j","randIndex","Math","floor","random","length","splice","val","toConsumableArray","determineEmptySquares","emptySquares","y","rand","parseInt","prevState","puzzleSolvedHandler","solved","solvedBoard","alert","changeDifficultyHanlder","level","componentWillMount","_this2","this","src_Header_Header","src_Card_Card","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.239e007b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport logo from '../logo.svg';\r\nimport './Header.css';\r\n\r\nconst Header = props => {\r\n    const difficultyLevel = \r\n        <select value={props.difficulty} onChange={props.change}>\r\n            <option value=\"easy\">Easy</option>\r\n            <option value=\"medium\" selected>Medium</option>\r\n            <option value=\"hard\">Hard</option>\r\n        </select>\r\n        \r\n    return (\r\n        <div>\r\n            <header className=\"App-header\">\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                <div>Difficulty Level: {difficultyLevel}</div>\r\n            </header>\r\n        </div>  \r\n    ); \r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Square.css';\r\n\r\nconst Square = props=> {   \r\n    //row coordinate is equal to first number and column coordinate is equal to second\r\n    const row = props.id.split(\"\")[0];\r\n    const column = props.id.split(\"\")[1];\r\n\r\n    //assign correct CSS upon solve button being pressed\r\n    let correctInput;\r\n    let inputCSS = \"input-square\";\r\n    let squareBackground = {};\r\n    if(props.boards.differentialBoard[0]){\r\n        correctInput = props.boards.differentialBoard[row][column] === false? false: true;\r\n        inputCSS = correctInput? \"correct-input-square\": \"incorrect-input-square\";\r\n        squareBackground = correctInput? {\"background\": \"#bdf3bd\"} :{\"background\": \"#ec5b5b\"};\r\n    }    \r\n\r\n    //checks original unsolved array to see if value is 0\r\n    let display;\r\n    const {originalUnsolvedBoard} = props.boards;\r\n    if(originalUnsolvedBoard[row][column] !== 0){\r\n        display = props.value;\r\n    }\r\n    else{\r\n        display = <input type=\"text\" className={inputCSS} onChange={e=> props.handleInput([e.target.value, row, column])}></input>\r\n    }\r\n\r\n    return (\r\n        <td className=\"square\" style={display !== props.value? squareBackground:{}} id={props.id}>\r\n            {display}\r\n        </td>\r\n    );\r\n};\r\n\r\nexport default Square;","import React from 'react';\r\nimport Square from '../Square/Square';\r\nimport './Row.css';\r\n\r\nconst Row = props => {\r\n    const squareValues = props.values.map((num, i)=>{\r\n        return <Square id={`${props.row}${i.toString()}` }  boards={props.boards}  value={num} handleInput={input=>props.handleInput(input)}/>\r\n    });\r\n\r\n    return (\r\n        <tr className=\"board-row\">\r\n            {squareValues}\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default Row;","import React from 'react';\r\nimport Row from '../Row/Row';\r\nimport './Card.css';\r\n\r\nconst Card = props=> {\r\n    const {unsolvedBoard} = props.boards;\r\n    const unsolvedRows = unsolvedBoard.map((rowNum, i)=>{\r\n        return <Row row={i} values={rowNum} handleInput={input=>props.handleInput(input)} boards={props.boards}/>;\r\n    })\r\n    return (\r\n        <tbody>\r\n            {unsolvedRows}\r\n        </tbody>\r\n    );\r\n};\r\n\r\nexport default Card;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Header/Header';\nimport Card from './Card/Card';\n\nclass App extends Component {\n  state = {\n    difficulty: \"medium\",\n    board: [],\n    unsolvedBoard: [],\n    //for persisting original state in Square components\n    originalUnsolvedBoard: [],\n    //for displaying correct and incorrect inputs\n    differentialBoard: []\n  }\n\n  createBoardArr = () =>{\n    let board = [[],[],[],[],[],[],[],[],[]];\n    board.forEach(x=>x = [0,0,0,0,0,0,0,0,0]);\n    for(var i=0; i < 9; i++){\n      const boardColumns = this.checkBoardColumns(board);\n      let noDuplicates = false;\n      while(noDuplicates === false){\n        let boardRow = this.addNumbertoSquare(board[i]);      \n        for(let q=0; q < 9; q++){\n          if(boardColumns[q].includes(boardRow[q])){\n            break;\n          }\n          else if(q === 8){\n            noDuplicates = true;\n          }\n        }\n      }\n    }\n    const [unsolvedBoard, originalUnsolvedBoard] = this.createUnsolvedBoard(board);\n    this.setState({\n      board,\n      unsolvedBoard,\n      originalUnsolvedBoard\n    })\n  };\n\n  addNumbertoSquare = boardRow =>{\n    let numsArr = [1,2,3,4,5,6,7,8,9];\n    for(var j=0; j < 9; j++){\n      const randIndex = Math.floor(Math.random() * numsArr.length);\n      boardRow[j] = numsArr[randIndex];\n      numsArr.splice(randIndex, 1);\n    }\n    return boardRow;\n  }\n\n  //creates new array to prevent duplicate numbers in columns\n  checkBoardColumns = board =>{\n    let boardColumns = board.map((val, i)=>{\n      return [...board[i]];\n    })\n    for(let i = 0; i < 9; i++){\n      for(let j = 0; j < 9; j++){\n        boardColumns[i][j] = board[j][i];\n      }\n    }\n    return boardColumns;\n  }\n\n  determineEmptySquares = () => {\n    const difficulty = this.state.difficulty;\n    switch (difficulty){\n      case \"easy\":\n        return [2,1];\n      case \"hard\":\n        return [3,6];\n      default:  //default is medium\n        return [3,3];\n    }\n  }\n\n  //adds input boxes for blank spaces\n  createUnsolvedBoard = board => {\n    let unsolvedBoard = board.map((val, i)=>{\n      return [...board[i]];\n    });\n    let originalUnsolvedBoard = board.map((val, i)=>{\n      return[...board[i]];\n    });\n    const emptySquares = this.determineEmptySquares();\n    for(let q = 0; q < unsolvedBoard.length; q++){\n      const y = Math.floor(Math.random() * emptySquares[0]) + emptySquares[1];\n      for(let j = 0; j < y; j++){\n        const rand = Math.floor(Math.random() * 9);\n        unsolvedBoard[q][rand] = 0;\n        originalUnsolvedBoard[q][rand] = 0;\n      }\n    }\n    return [unsolvedBoard, originalUnsolvedBoard];\n  }\n\n  //input is array equal to value, row, and column of number\n  handleInput = input=>{\n    const value = parseInt(input[0]);\n    const row = input[1];\n    const column = input[2];\n    this.setState(prevState=>{\n      const unsolvedBoard = prevState.unsolvedBoard;\n      unsolvedBoard[row][column] = value;\n      return {unsolvedBoard};\n    });\n  }\n\n  puzzleSolvedHandler = () =>{\n    let solved = true;\n    const solvedBoard = this.state.board;\n    const unsolvedBoard = this.state.unsolvedBoard;\n    const differentialBoard = this.state.unsolvedBoard.map(x=>[...x]);\n    for(let i = 0; i < solvedBoard.length; i++){\n      for(let j = 0; j < solvedBoard[i].length; j++){\n        if(solvedBoard[i][j] !== unsolvedBoard[i][j]) {\n          solved = false;\n          differentialBoard[i][j] = false;\n        }\n      }\n    }\n    this.setState({differentialBoard});\n    if(solved){\n      alert(\"Congrats! You Won!\");\n    }\n    else{\n      alert(\"Keep trying\");\n    }\n  }\n\n  changeDifficultyHanlder = level => {\n    this.setState({difficulty: level}, () => this.createBoardArr())\n  }\n\n  componentWillMount = () =>{\n    this.createBoardArr();\n  }\n\n  render() {\n    const boards = {\n      originalUnsolvedBoard: this.state.originalUnsolvedBoard,\n      unsolvedBoard: this.state.unsolvedBoard,\n      board: this.state.board,\n      differentialBoard: this.state.differentialBoard\n    }\n    return (\n      <div className=\"App\">\n        <Header className difficulty={this.state.difficulty} change={e=> this.changeDifficultyHanlder(e.target.value)}/>      \n        <table className=\"board\">\n          <Card boards={boards} handleInput={input=>this.handleInput(input)}/>\n        </table>\n        <button onClick={this.puzzleSolvedHandler}>Check Puzzle</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}