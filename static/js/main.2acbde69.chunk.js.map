{"version":3,"sources":["logo.svg","Square/Square.js","Row/Row.js","Card/Card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Square","props","display","row","id","split","column","original","value","react_default","a","createElement","type","className","onChange","e","handleInput","target","style","background","Row","squareValues","values","map","num","i","src_Square_Square","concat","toString","input","Card","unsolvedRows","unsolvedBoard","rowNum","src_Row_Row","App","state","board","originalUnsolvedBoard","createBoardArr","forEach","x","boardColumns","_this","checkBoardColumns","noDuplicates","boardRow","addNumbertoSquare","q","includes","_this$createUnsolvedB","createUnsolvedBoard","_this$createUnsolvedB2","Object","slicedToArray","setState","numsArr","j","randIndex","Math","floor","random","length","splice","val","toConsumableArray","y","rand","parseInt","prevState","puzzleSolvedHandler","solved","solvedBoard","alert","componentWillMount","_this2","this","console","log","src","logo","alt","src_Card_Card","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2acbde69.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './Square.css';\r\n\r\nconst Square = props=> {   \r\n    let display;\r\n    //row coordinate is equal to first number and column coordinate is equal to second\r\n    const row = props.id.split(\"\")[0];\r\n    const column = props.id.split(\"\")[1];\r\n    //checks original unsolved array to see if value is 0\r\n    if(props.original[row][column] !== 0){\r\n        display = props.value;\r\n    }\r\n    else{\r\n        display = <input type=\"text\" className=\"inputSquare\" onChange={e=> props.handleInput([e.target.value, row, column])}></input>\r\n    }\r\n\r\n    return (\r\n        <td className=\"square\" style={display!==props.value?{\"background\": \"#bdf3bd\"}:{}} id={props.id}>\r\n            {display}\r\n        </td>\r\n    );\r\n};\r\n\r\nexport default Square;","import React from 'react';\r\nimport Square from '../Square/Square';\r\nimport Classes from './Row.css';\r\n\r\nconst Row = props => {\r\n    const squareValues = props.values.map((num, i)=>{\r\n        return <Square id={`${props.row}${i.toString()}` }  original={props.original}  value={num} handleInput={input=>props.handleInput(input)}/>\r\n    });\r\n\r\n    return (\r\n        <tr className=\"boardRow\">\r\n            {squareValues}\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default Row;","import React from 'react';\r\nimport Row from '../Row/Row';\r\nimport Classes from './Card.css';\r\n\r\nconst Card = props=> {\r\n    const unsolvedRows = props.unsolvedBoard.map((rowNum, i)=>{\r\n        return <Row row={i} values={rowNum} handleInput={input=>props.handleInput(input)} original={props.original}/>;\r\n    })\r\n    return (\r\n        <tbody>\r\n            {unsolvedRows}\r\n        </tbody>\r\n    );\r\n};\r\n\r\nexport default Card;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Card from './Card/Card';\n\nclass App extends Component {\n  state = {\n    board: [],\n    unsolvedBoard: [],\n    //for persisting original state in Square components\n    originalUnsolvedBoard: []\n  }\n\n  createBoardArr = () =>{\n    let board = [[],[],[],[],[],[],[],[],[]];\n    board.forEach(x=>x = [0,0,0,0,0,0,0,0,0]);\n    for(var i=0; i < 9; i++){\n      const boardColumns = this.checkBoardColumns(board);\n      let noDuplicates = false;\n      while(noDuplicates === false){\n        let boardRow = this.addNumbertoSquare(board[i]);      \n        for(let q=0; q < 9; q++){\n          if(boardColumns[q].includes(boardRow[q])){\n            break;\n          }\n          else if(q === 8){\n            noDuplicates = true;\n          }\n        }\n      }\n    }\n    // this.checkBoardColumns(board);\n    const [unsolvedBoard, originalUnsolvedBoard] = this.createUnsolvedBoard(board);\n    this.setState({\n      board,\n      unsolvedBoard,\n      originalUnsolvedBoard\n    })\n  };\n\n  addNumbertoSquare = boardRow =>{\n    let numsArr = [1,2,3,4,5,6,7,8,9];\n    for(var j=0; j < 9; j++){\n      const randIndex = Math.floor(Math.random() * numsArr.length);\n      boardRow[j] = numsArr[randIndex];\n      numsArr.splice(randIndex, 1);\n    }\n    return boardRow;\n  }\n\n  //creates new array to prevent duplicate numbers in columns\n  checkBoardColumns = board =>{\n    let boardColumns = board.map((val, i)=>{\n      return [...board[i]];\n    })\n    for(let i = 0; i < 9; i++){\n      for(let j = 0; j < 9; j++){\n        boardColumns[i][j] = board[j][i];\n      }\n    }\n    return boardColumns;\n  }\n\n  //adds input boxes for blank spaces\n  createUnsolvedBoard = board => {\n    let unsolvedBoard = board.map((val, i)=>{\n      return [...board[i]];\n    });\n    let originalUnsolvedBoard = board.map((val, i)=>{\n      return[...board[i]];\n    });\n    //removes three to five input values\n    for(let q = 0; q < unsolvedBoard.length; q++){\n      const y = Math.floor(Math.random() * 3) + 3;\n      for(let j = 0; j < y; j++){\n        const rand = Math.floor(Math.random() * 9);\n        unsolvedBoard[q][rand] = 0;\n        originalUnsolvedBoard[q][rand] = 0;\n      }\n    }\n    return [unsolvedBoard, originalUnsolvedBoard];\n  }\n\n  //input is array equal to value, row, and column of number\n  handleInput = input=>{\n    const value = parseInt(input[0]);\n    const row = input[1];\n    const column = input[2];\n    this.setState(prevState=>{\n      const unsolvedBoard = prevState.unsolvedBoard;\n      unsolvedBoard[row][column] = value;\n      return {unsolvedBoard};\n    });\n  }\n\n  puzzleSolvedHandler = () =>{\n    let solved = true;\n    const solvedBoard = this.state.board;\n    const unsolvedBoard = this.state.unsolvedBoard;\n    for(let i = 0; i < solvedBoard.length; i++){\n      for(let j = 0; j < solvedBoard[i].length; j++){\n        if(solvedBoard[i][j] !== unsolvedBoard[i][j]) {\n          solved = false;\n        }\n      }\n    }\n    if(solved){\n      alert(\"Congrats! You Won!\");\n    }\n    else{\n      alert(\"Keep trying\");\n    }\n  }\n\n  componentWillMount = () =>{\n    this.createBoardArr();\n  }\n\n  render() {\n    console.log(this.state.board);\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>       \n        <table className=\"board\">\n          <Card unsolvedBoard={this.state.unsolvedBoard} original={this.state.originalUnsolvedBoard} handleInput={input=>this.handleInput(input)}/>\n        </table>\n        <button onClick={this.puzzleSolvedHandler}>Check Puzzle</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}