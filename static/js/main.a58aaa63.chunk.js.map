{"version":3,"sources":["logo.svg","Card/Card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","card","props","display","children","react_default","a","createElement","type","className","App","state","board","unsolvedBoard","createBoardArr","i","numsArr","j","randIndex","Math","floor","random","length","splice","_this","setState","removeRandomNumber","arrRow","randomInt","console","log","concat","createUnsolvedBoard","slice","q","y","rand","componentWillMount","componentDidMount","_this2","this","boardRows","row","key","Card_Card","src","logo","alt","numberClicked","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a58aaa63.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './Card.css';\r\n\r\nconst card = props=> {\r\n    let display;\r\n    if(props.children !== 0){\r\n        display = props.children;\r\n    }\r\n    else{\r\n        display = <input type=\"text\" className=\"inputSquare\"></input>\r\n    }\r\n\r\n    return (\r\n        <div className=\"square\">\r\n            {display}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default card;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Card from './Card/Card';\nimport './Card/Card.css';\n\nclass App extends Component {\n  state = {\n    board: [],\n    unsolvedBoard: []\n  };\n\n  createBoardArr = () =>{\n    let board = [[],[],[],[],[],[],[],[],[]];\n    for(var i=0; i < 9; i++){\n      let numsArr = [1,2,3,4,5,6,7,8,9];\n      for(var j=0; j < 9; j++){\n        const randIndex = Math.floor(Math.random() * numsArr.length);\n        board[i][j] = numsArr[randIndex];\n        numsArr.splice(randIndex, 1);\n      }\n    }\n    this.setState({board});\n  };\n\n  //finds unsolved number\n  removeRandomNumber = arrRow =>{\n    let randomInt = Math.floor(Math.random() * 9);\n    // while(this.state.unsolvedBoard.indexOf(randomInt) === 0){\n      console.log(`${arrRow}\\n${randomInt}`);\n      randomInt = Math.floor(Math.random() * 9);\n    // }\n    return randomInt;\n  }\n\n  //adds input boxes for blank spaces\n  createUnsolvedBoard = () => {\n    let unsolvedBoard = this.state.board.slice();\n    //removes four to six input values\n    console.log(unsolvedBoard.length);\n    for(let q = 0; q < unsolvedBoard.length; q++){\n      const y = Math.floor(Math.random() * 3) + 4;\n      for(let j = 0; j < y; j++){\n        const rand = this.removeRandomNumber(unsolvedBoard[q]);\n        unsolvedBoard[q][rand] = 0;\n      }\n    }\n    this.setState({unsolvedBoard});\n  }\n\n  componentWillMount = () =>{\n    this.createBoardArr();\n  }\n\n  componentDidMount = () => {\n    this.createUnsolvedBoard();\n  }\n\n  render() {\n    //change this later so it's no rerendered every time\n    console.log(this.state.unsolvedBoard);\n    console.log(this.state.unsolvedBoard);\n\n    const boardRows = row => {\n      return( <div className='boardRow' key={row}>\n        <Card>{this.state.board[row][0]}</Card>\n        <Card>{this.state.board[row][1]}</Card>\n        <Card>{this.state.board[row][2]}</Card>\n        <Card>{this.state.board[row][3]}</Card>\n        <Card>{this.state.board[row][4]}</Card>\n        <Card>{this.state.board[row][5]}</Card>\n        <Card>{this.state.board[row][6]}</Card>\n        <Card>{this.state.board[row][7]}</Card>\n        <Card>{this.state.board[row][8]}</Card>\n      </div>);\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h2 className=\"numberClicked\">{this.state.numberClicked}</h2>\n        </header>       \n        <div className=\"board\">\n          {boardRows(0)}\n          {boardRows(1)}\n          {boardRows(2)}\n          {boardRows(3)}\n          {boardRows(4)}\n          {boardRows(5)}\n          {boardRows(6)}\n          {boardRows(7)}\n          {boardRows(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}